{"version":3,"sources":["ArrayItem/ArrayItem.js","sortingAlgos/sortingAlgos.js","ArraySort/ArraySort.js","App.js","serviceWorker.js","index.js"],"names":["ArrayItem","props","st","height","parseInt","number","maxNum","width","totalItems","style","className","wait","time","a","Promise","res","setTimeout","MergeSort","update","this","items","_sort","length","begin","end","middle","Math","floor","left","right","i","j","push","splice","BubbleSort","unsorted","tmp","InsertionSort","QuickSort","pivot","_partition","pivotIndex","HeapSort","_heap","_heapLength","_buildHeap","_heapify","leftIndex","rightIndex","smallest","current","Infinity","createSortingAlgorithm","algorithm","Error","ArraySort","state","_generateItems","minNum","sorting","min","max","randomNum","random","setState","algo","sortingAlgorithm","sort","key","disabled","onClick","_reset","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b9344685.chunk.js","sourcesContent":["import React from 'react';\nimport './ArrayItem.css'\n\nfunction ArrayItem(props) {\n\n    const st = {\n        height: `${parseInt(props.number * 100 / props.maxNum)}%`,\n        width: `${50 / props.totalItems}%`\n    };\n\n    return (\n        <div style={st} className=\"ArrayItem\">\n        </div>\n    );\n}\n\nexport default ArrayItem;\n","\nasync function wait(time) {\n    return new Promise(res => {\n        setTimeout(\n            res,\n            time\n        );\n    });\n};\n\nclass MergeSort {\n\n    constructor(update, wait) {\n        this.update = update;\n        this.wait = wait;\n    }\n\n    async sort(items) {\n        return this._sort(items, 0, items.length);\n    }\n\n    async _sort(items, begin, end)   {\n        if (end - begin === 1) return [items[begin]];\n        else if (end - begin === 0) return [];\n\n        const middle = begin + Math.floor((end - begin) / 2);\n\n        const left = await this._sort(items, begin, middle);\n        const right = await this._sort(items, middle, end);\n\n        let res = [];\n        let i = 0;\n        let j = 0;\n        while (i < left.length && j < right.length) {\n            if (left[i] <= right[j]) {\n                res.push(left[i]);\n                i += 1;\n            } else {\n                res.push(right[j]);\n                j += 1;\n            }\n\n            await wait(this.wait);\n\n            items.splice(begin, res.length, ...res);\n            this.update(items);\n        }\n\n        while (i !== left.length) {\n            res.push(left[i]);\n            i += 1;\n            items.splice(begin, res.length, ...res);\n            this.update(items);\n        }\n        while (j !== right.length) {\n            res.push(right[j]);\n            j += 1;\n            items.splice(begin, res.length, ...res);\n            this.update(items);\n        }\n\n        return res;\n    }\n\n};\n\nclass BubbleSort {\n\n    constructor(update, wait) {\n        this.update = update;\n        this.wait = wait;\n    }\n\n    async sort(items) {\n        let unsorted;\n\n        do {\n            unsorted = false;\n\n            for (let i = 0; i < items.length - 1; ++i) {\n                if (items[i] > items[i + 1]) {\n                    const tmp = items[i];\n                    items[i] = items[i + 1];\n                    items[i + 1] = tmp;\n                    unsorted = true;\n\n                    await wait(this.wait);\n\n                    this.update(items);\n                }\n            }\n\n        } while(unsorted);\n    }\n\n}\n\nclass InsertionSort {\n\n    constructor(update, wait) {\n        this.update = update;\n        this.wait = wait;\n    }\n\n    async sort(items) {\n        for (let i = 1; i < items.length; ++i) {\n            let j = i;\n\n            while (j && items[j - 1] > items[j]) {\n                const tmp = items[j - 1];\n                items[j - 1] = items[j];\n                items[j] = tmp;\n\n                --j;\n\n                await wait(this.wait);\n                this.update(items);\n            }\n\n        }\n    }\n\n}\n\nclass QuickSort {\n\n    constructor(update, wait) {\n        this.update = update;\n        this.wait = wait;\n    }\n\n    async _partition(items, left, right) {\n        const pivot = items[right - 1];\n\n        let i, j;\n        for (j = left, i = left - 1; j < right - 1; ++j) {\n            if (items[j] < pivot) {\n                i += 1;\n\n                const tmp = items[i];\n                items[i] = items[j];\n                items[j] = tmp;\n\n                await wait(this.wait);\n                this.update(items);\n            }\n        }\n\n        items[right - 1] = items[i + 1];\n        items[i + 1] = pivot;\n\n        await wait(this.wait);\n        this.update(items);\n\n        return i + 1;\n    }\n\n    async _sort(items, left, right) {\n        if (right - left <= 1) return;\n\n        const pivotIndex = await this._partition(items, left, right);\n\n        await this._sort(items, left, pivotIndex);\n        await this._sort(items, pivotIndex, right);\n    }\n\n    async sort(items) {\n        return this._sort(items, 0, items.length);\n    }\n\n}\n\nclass HeapSort {\n\n    constructor(update, wait) {\n        this.update = update;\n        this.wait = wait;\n    }\n\n    async sort(items) {\n        this._heap = items;\n        this._heapLength = items.length;\n\n        await this._buildHeap();\n\n        while (this._heapLength) {\n            const tmp = this._heap[this._heapLength - 1];\n            this._heap[this._heapLength - 1] = this._heap[0];\n            this._heap[0] = tmp;\n\n            this._heapLength -= 1;\n\n            await wait(this.wait);\n            this.update(this._heap);\n\n            await this._heapify(0);\n        }\n    }\n\n    async _heapify(i) {\n        const leftIndex = 2 * i + 1;\n        const rightIndex = 2 * i + 2;\n        let smallest = i;\n\n        const current = this._heap[i];\n        const left = leftIndex < this._heapLength ? this._heap[leftIndex] : -Infinity;\n        const right = rightIndex < this._heapLength ? this._heap[rightIndex] : -Infinity;\n\n        if (left >= right && left > current) {\n            smallest = leftIndex;\n        } else if (right >= left && right > current) {\n            smallest = rightIndex;\n        }\n\n        if (smallest !== i) {\n            const tmp = this._heap[i];\n            this._heap[i] = this._heap[smallest];\n            this._heap[smallest] = tmp;\n\n            await wait(this.wait);\n            this.update(this._heap);\n\n            await this._heapify(smallest);\n        }\n    }\n\n    async _buildHeap() {\n        for (let i = Math.floor(this._heapLength / 2); i >= 0; --i) {\n            await this._heapify(i);\n        }\n    }\n\n}\n\nfunction createSortingAlgorithm(algorithm, update, wait) {\n    switch (algorithm) {\n        case \"merge\":\n            return new MergeSort(update, wait);\n        case \"quick\":\n            return new QuickSort(update, wait);\n        case \"heap\":\n            return new HeapSort(update, wait);\n        case \"bubble\":\n            return new BubbleSort(update, wait);\n        case \"insertion\":\n            return new InsertionSort(update, wait);\n        default:\n            throw new Error(\"Not yet implemented\");\n    }\n}\n\nexport { createSortingAlgorithm };\n","import React from 'react';\nimport './ArraySort.css'\n\nimport ArrayItem from '../ArrayItem/ArrayItem.js';\nimport {createSortingAlgorithm} from '../sortingAlgos/sortingAlgos.js';\n\nclass ArraySort extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.props = props;\n\n        this.state = {\n            items: this._generateItems(this.props.length, this.props.minNum, this.props.maxNum),\n            sorting: false\n        }\n    }\n\n    _generateItems(number, min, max) {\n        const items = [];\n\n        for (let i = 0; i < number; ++i) {\n            const randomNum = Math.random() * (max - min) + min;\n            items.push(randomNum);\n        }\n\n        return items;\n    }\n\n    _reset() {\n        const state = this.state;\n        state.items = this._generateItems(this.props.length, this.props.minNum, this.props.maxNum);\n        state.sorting = false;\n\n        this.setState(state);\n    }\n\n    async _sort(algo) {\n        const state = this.state;\n        state.sorting = true;\n        this.setState(state);\n\n        const update = (items) => {\n            state.items = [...items];\n            this.setState(state);\n        }\n\n        const sortingAlgorithm = createSortingAlgorithm(algo, update, 10);\n        await sortingAlgorithm.sort([...state.items]);\n\n        state.sorting = false;\n        this.setState(state);\n    }\n\n    render(props) {\n        const items = [];\n\n        for (let i = 0; i < this.state.items.length; ++i) {\n            items.push(<ArrayItem key={i} number={this.state.items[i]} maxNum={this.props.maxNum} totalItems={this.props.length}/>);\n        }\n\n        return (\n            <div className=\"ArraySort\">\n                <div className=\"ItemContainer\">\n                    {items}\n                </div>\n                <div className=\"sortBtnRow\">\n                    <button className=\"sortBtn\" disabled={this.state.sorting} onClick={() => this._reset()}>Generate New Array</button>\n                    <button className=\"sortBtn\" disabled={this.state.sorting} onClick={async () => await this._sort(\"merge\")}>Merge Sort</button>\n                    <button className=\"sortBtn\" disabled={this.state.sorting} onClick={async () => await this._sort(\"quick\")}>Quick Sort</button>\n                    <button className=\"sortBtn\" disabled={this.state.sorting} onClick={async () => await this._sort(\"heap\")}>Heap Sort</button>\n                    <button className=\"sortBtn\" disabled={this.state.sorting} onClick={async () => await this._sort(\"bubble\")}>Bubble Sort</button>\n                    <button className=\"sortBtn\" disabled={this.state.sorting} onClick={async () => await this._sort(\"insertion\")}>Insertion Sort</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ArraySort;\n","import React from 'react';\nimport './App.css';\n\nimport ArraySort from './ArraySort/ArraySort.js';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ArraySort length={150} maxNum={1000} minNum={10} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}